import os
import cv2
import numpy as np
from sklearn.metrics import confusion_matrix, classification_report
import joblib
from groq import Groq
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, HRFlowable, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.pdfgen import canvas
from reportlab.lib.utils import ImageReader
from reportlab.platypus.flowables import Flowable
import gradio as gr
import base64
from PyPDF2 import PdfReader, PdfWriter

# Initialize the Groq client
GROQ_API_KEY = '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'
client = Groq(api_key=GROQ_API_KEY)

# Load the trained Random Forest model
model_path = "random_forest_quality_classifier.pkl"
clf = joblib.load(model_path)

# Feature extraction functions
def calculate_laplacian_variance(image):
    """Measure sharpness using Laplacian variance."""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return cv2.Laplacian(gray, cv2.CV_64F).var()

def calculate_brightness(image):
    """Measure brightness by calculating mean pixel intensity."""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return np.mean(gray)

def calculate_noise(image):
    """Measure noise level using standard deviation of pixel intensities."""
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    return np.std(gray)

def extract_features(image_path):
    """Extract features for a single image."""
    image = cv2.imread(image_path)
    if image is None:
        raise ValueError(f"Unable to read image at {image_path}")
    return [
        calculate_laplacian_variance(image),
        calculate_brightness(image),
        calculate_noise(image),
    ]

# Function to classify the quality of an image
def classify_image_quality(image_path):
    try:
        features = extract_features(image_path)
        prediction = clf.predict([features])[0]
        return "good" if prediction == 1 else "poor"
    except Exception as e:
        raise ValueError(f"Error during classification: {e}")

# Function to encode image as base64
def encode_image(image_path):
    with open(image_path, "rb") as image_file:
        return base64.b64encode(image_file.read()).decode('utf-8')

# Function to describe the image using the Groq model
def describe_image(image_path, prompt):
    if image_path:
        base64_image = encode_image(image_path)
        response = client.chat.completions.create(
            model="llama-3.2-90b-vision-preview",
            messages=[
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": prompt},
                        {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                    ]
                }
            ],
            temperature=0.5,
            max_tokens=1024,
            top_p=1,
            stream=False,
            stop=None,
        )
    else:
        response = client.chat.completions.create(
            model="llama-3.2-90b-vision-preview",
            messages=[
                {"role": "user", "content": [{"type": "text", "text": prompt}]}
            ],
            temperature=0.5,
            max_tokens=1024,
            top_p=1,
            stream=False,
            stop=None,
        )
    return response.choices[0].message.content

# Function to Extract Specific Field Content from Provisional Report
def extract_field_content(provisional_report, field_name):
    prompt = (
        f"What is the content under the field name '{field_name}' in this report: \"{provisional_report}\"? "
        f"Return only the concise and exact value for this field."
    )
    response = describe_image(None, prompt)
    # Extract only the relevant value by cleaning the response
    if ":" in response:
        response = response.split(":", 1)[-1].strip()
    return response

# Custom function to add a faint background image
def add_background_image(c, background_path, page_size):
    if os.path.exists(background_path):
        background = ImageReader(background_path)
        c.saveState()
        c.setFillAlpha(0.1)  # Set transparency to 10%
        c.drawImage(background, 0, 0, width=page_size[0], height=page_size[1], mask='auto')
        c.restoreState()

# Function to generate a detailed PDF report based on fields
def generate_detailed_pdf(provisional_report):
    # Hardcoded hospital details
    hospital_name = "Saroj Hospital, Delhi"
    hospital_address = "Sector 16, Rohini, New Delhi, Delhi 110085, India"
    hospital_contact = "Phone: +91 11 2786 0000"

    # Logo and background paths
    logo_path =  "D:\\healthcare project\\download-removebg-preview.png" #  update your logo path here
    background_path = "D:\\healthcare project\\bg.jpeg" # update your background path here

    # List of fields to extract
    fields = [
        "Patient Name", "Age", "Gender", "Patient ID", "Date of Examination", "Referring Physician",
        "Priority", "Type of Imaging", "Region Examined", "Clinical History",
        "Findings", "Impression", "Recommendation", "Radiologist Name", "Date"
    ]

    # Extract content for each field
    formatted_fields = {}
    for field in fields:
        formatted_fields[field] = extract_field_content(provisional_report, field) or "Not Provided"

    # PDF output path
    pdf_output = "./final_detailed_report.pdf"
    styles = getSampleStyleSheet()

    # Define styles
    title_style = ParagraphStyle(name="Title", fontSize=16, leading=20, alignment=1, textColor=colors.darkgreen)
    header_style = ParagraphStyle(name="Header", fontSize=9, leading=11, alignment=0, textColor=colors.black)
    body_style = ParagraphStyle(name="Body", fontSize=10, leading=12, textColor=colors.black)
    section_heading_style = ParagraphStyle(name="SectionHeading", fontSize=14, leading=16, alignment=0, textColor=colors.darkgreen, spaceAfter=5, fontName="Helvetica-Bold")
    field_content_style = ParagraphStyle(name="FieldContent", fontSize=11, leading=13, textColor=colors.black)
    subfield_style = ParagraphStyle(name="Subfield", fontSize=10, leading=12, textColor=colors.black, fontName="Helvetica-Bold")

    elements = []

    # Add logo at center
    if os.path.exists(logo_path):
        logo = Image(logo_path, width=150, height=80)
        logo.hAlign = 'CENTER'
        elements.append(logo)
    elements.append(Spacer(1, 3))  # Reduced Spacer

    # Add hospital details aligned left
    elements.append(Paragraph(hospital_name, header_style))
    elements.append(Paragraph(hospital_address, header_style))
    elements.append(Paragraph(hospital_contact, header_style))
    elements.append(Spacer(1, 5))  # Reduced Spacer

    # Add horizontal line
    elements.append(HRFlowable(width="100%", thickness=1, color=colors.green, lineCap="square", spaceBefore=2, spaceAfter=2))
    elements.append(Spacer(1, 4))  # Reduced Spacer

    # Add Radiology Report title
    elements.append(Paragraph("Radiology Report", title_style))
    elements.append(Spacer(1, 6))  # Reduced Spacer

    # Patient Details Section
    elements.append(Paragraph("Patient Details", section_heading_style))
    patient_details = (
        f"<b>Name:</b> {formatted_fields.get('Patient Name')}<br/>"
        f"<b>Age:</b> {formatted_fields.get('Age')}<br/>"
        f"<b>Gender:</b> {formatted_fields.get('Gender')}<br/>"
        f"<b>Patient ID:</b> {formatted_fields.get('Patient ID')}<br/>"
        f"<b>Date of Examination:</b> {formatted_fields.get('Date of Examination')}<br/>"
        f"<b>Referring Physician:</b> {formatted_fields.get('Referring Physician')}"
    )
    elements.append(Paragraph(patient_details, subfield_style))
    elements.append(Spacer(1, 3))

    # Priority Section
    elements.append(Paragraph("Priority", section_heading_style))
    elements.append(Paragraph(f"<b>{formatted_fields.get('Priority')}</b>", field_content_style))

    # Examination Details Section
    elements.append(Spacer(1, 3))
    elements.append(Paragraph("Examination Details", section_heading_style))
    examination_details = (
        f"<b>Type of Imaging:</b> {formatted_fields.get('Type of Imaging')}<br/>"
        f"<b>Region Examined:</b> {formatted_fields.get('Region Examined')}<br/>"
        f"<b>Clinical History:</b> {formatted_fields.get('Clinical History')}"
    )
    elements.append(Paragraph(examination_details, subfield_style))

    # Findings Section
    elements.append(Spacer(1, 3))
    elements.append(Paragraph("Findings", section_heading_style))
    findings = formatted_fields.get('Findings', 'Not Provided')
    formatted_findings = findings.replace('*', '').strip().replace('  ', ' ')
    for line in formatted_findings.split('\n'):
        elements.append(Paragraph(line.strip(), field_content_style))

    # Impression Section
    elements.append(Spacer(1, 3))
    elements.append(Paragraph("Impression", section_heading_style))
    elements.append(Paragraph(f"{formatted_fields.get('Impression')}", field_content_style))

    # Recommendation Section
    elements.append(Spacer(1, 3))
    elements.append(Paragraph("Recommendation", section_heading_style))
    elements.append(Paragraph(f"{formatted_fields.get('Recommendation')}", field_content_style))

    # Radiologist Section
    elements.append(Spacer(1, 3))
    elements.append(Paragraph("Radiologist Details", section_heading_style))
    radiologist_details = (
        f"<b>Radiologist:</b> {formatted_fields.get('Radiologist Name')}<br/>"
        f"<b>Date:</b> {formatted_fields.get('Date')}"
    )
    elements.append(Paragraph(radiologist_details, subfield_style))

    # Save PDF with background and elements
    pdf_output = "./final_detailed_report.pdf"
    doc = SimpleDocTemplate(pdf_output, pagesize=letter, topMargin=36)  # Reduced topMargin

    # Custom build process to add background
    def build_with_background(canvas, doc):
        add_background_image(canvas, background_path, letter)
        canvas.saveState()
        doc.canv = canvas  # Restore canvas for doc elements

    doc.build(elements, onFirstPage=build_with_background)

    return pdf_output

# Function to generate the abstract PDF only
def generate_abstract_pdf(abstract):
    try:
        new_pdf_path = "./report_abstract.pdf"
        doc = SimpleDocTemplate(new_pdf_path, pagesize=letter)
        styles = getSampleStyleSheet()

        # Customize styles for the abstract
        styles.add(ParagraphStyle(name='AbstractTitle', fontSize=14, leading=16, alignment=1, textColor=colors.darkblue, fontName="Helvetica-Bold")) # Centered and bold
        styles.add(ParagraphStyle(name='AbstractBody', fontSize=12, leading=14, alignment=0, textColor=colors.black))

        story = []
        # Add the Abstract Title
        story.append(Paragraph("<b>AI Generated Report Summary</b>", styles['AbstractTitle']))
        story.append(Spacer(1, 12))
        # Add the Abstract Content
        story.append(Paragraph(abstract, styles['AbstractBody']))

        # Build the new PDF document
        doc.build(story)

        return new_pdf_path
    except Exception as e:
        return None

# Function to process the uploaded image
def process_image(image_path, report_format):
    """
    Analyzes the medical imaging file at 'image_path' and generates a provisional radiology report.
    If the image quality is poor, an error is raised. Otherwise, it uses the 'prompt' to guide
    a model or function (like 'describe_image') to generate the report text.
    """
    try:
        # Check image quality
        quality = classify_image_quality(image_path)
        if quality == "poor":
            raise gr.Error("Poor quality scan detected. Please upload a better-quality image.")

        # Construct the prompt
        prompt = (
            f"You are a virtual radiologist and you have to do job in the best possible manner.You would be provided with images of people having pneumonia analyse this and Provide a final interpretation. Analyze the provided medical imaging and "
            f"generate a detailed provisional report. Identify the scan type (e.g., X-ray, CT, MRI) "
            f"and describe any abnormalities, patterns, or relevant observations. "
            f"If patient info is missing, use the details provided in sample "
            f"Assist the radiologist in making a diagnosis.\n\n"
            f"Use this sample format if format is not given:\n"
            f"Use this sample format if format is not given:\n"
            f"Use the name age gender patiennt id details provided in the sample below for report generation"
            f"Patient Details:\n"
            f"  Name: Rajesh Singh\n"
            f"  Age: 45\n"
            f"  Gender: Male\n"
            f"  Patient ID: 12345\n"
            f"  Date of Examination: December 21, 2024\n"
            f"  Referring Physician: Dr. Vishal Arora\n"
            f"Add this on top of the document Priority:High ,Low or Medium (based on report severity assign whether it is "
            f"on the basis of whether patient needs urgent treatment)\n\n"
            f"Examination Details\n"
            f"  Type of Imaging: X-Ray\n"
            f"  Region Examined: Chest (Posteroanterior View)\n"
            f"  Clinical History: Cough, shortness of breath, and suspected pneumonia.\n\n"
            f"Findings\n"
            f"  Lungs and Pleura: Increased opacity observed in the lower zone of the right lung, "
            f"  suggestive of consolidation, possibly due to pneumonia. "
            f"  No evidence of pleural effusion. No pneumothorax detected.\n"
            f"  Heart: Cardiothoracic ratio within normal limits. No signs of cardiomegaly.\n ensure that these are single line"
            f"  Mediastinum and Hilum: Mediastinal contours appear normal. "
            f"  No significant lymphadenopathy noted.\n"
            f"  Bones and Soft Tissues: Bony thorax appears intact. No fractures or lytic lesions observed. "
            f"  Normal soft tissue shadows.\n"
            f"  Diaphragm: Diaphragm contours are smooth and normal. "
            f"  No subdiaphragmatic free gas seen.\n\n"
            f"Impression\n"
            f"  Findings suggestive of right lower lobe pneumonia. Recommend clinical correlation and follow-up "
            f"  imaging if symptoms persist or worsen. Consider sputum analysis or further investigations "
            f"  to rule out atypical pathogens.\n\n"
            f"Radiologist: Dr.Sunil Singh (MD, Radiology)\n"
            f"Date: December 21, 2024\n\n"
            f"{report_format}"
        )

        # Use the 'prompt' to describe the image (model or function call)
        description = describe_image(image_path, prompt)

        return description

    except gr.Error as e:
        # Raise specific Gradio error if something goes wrong
        raise e
    except Exception as e:
        # Catch-all for any other errors
        raise gr.Error(f"Error: {e}")


# Function to generate the final report and explanation
def process_final_report(provisional_report, language):
     try:
        explanation_prompt = (
            f"just give the paragraph .You are a report writer. Provide an abstract of this report in {language} based on this report: {provisional_report} in just a single paragraph , make a report which is easy for a layperson to understand. Always follow this: 'reports language should be professional and easy to understand'. Provide  advice for further action, highlighting the criticality of the condition."
        )

        explanation = describe_image(None, explanation_prompt)
        explanation_pdf_path = generate_abstract_pdf(explanation) # Generate PDF here
        return explanation, explanation_pdf_path

     except Exception as e:
            return f"Error: {e}", None

# Function to generate the final PDF only
def process_pdf_only(provisional_report):
    try:
        pdf_path = generate_detailed_pdf(provisional_report)
        return pdf_path

    except Exception as e:
        return None

# Define Gradio application
def create_app():
    with gr.Blocks(css=""".gradio-container {background-color: #f8f9fa;}
                        .medical-theme .gr-button {background-color: #28a745; border-color: #28a745; color: white; padding: 8px 16px; font-size: 16px; border-radius: 8px; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); font-weight: bold;}
                        .medical-theme .gr-button:hover {background-color: #218838; cursor: pointer;}
                        .medical-theme .gr-textbox, .medical-theme .gr-dropdown {background-color: #ffffff; border: 1px solid #ced4da; border-radius: 8px; padding: 8px; font-size: 16px; box-shadow: inset 0px 2px 4px rgba(0, 0, 0, 0.1);}
                        .medical-theme .gr-textbox:focus, .medical-theme .gr-dropdown:focus {border-color: #80bdff; outline: 0; box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);}
                        .medical-theme .gr-label {font-weight: 600; color: #212529; margin-bottom: 8px; font-size: 16px;}
                        .medical-theme .gr-dataframe {border-color: #ced4da;}
                        .medical-theme .output-markdown {color: #343a40;}
                        .medical-theme .output-markdown h1, .medical-theme .output-markdown h2, .medical-theme .output-markdown h3, .medical-theme .output-markdown h4, .medical-theme .output-markdown h5, .medical-theme .output-markdown h6 {color: #212529; font-weight: bold;}
                        .medical-theme .gr-image {border: 2px solid #ced4da; border-radius: 8px;}
                        .medical-theme .gr-file {border: 2px solid #ced4da; border-radius: 8px; padding: 8px;}
                        .medical-theme .gr-file .gr-upload-button {background-color: #e9ecef; border-color: #ced4da; color: #495057; padding: 8px 16px; font-size: 16px; border-radius: 8px; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);}
                        .medical-theme .gr-file .gr-upload-button:hover {background-color: #e2e6ea; cursor: pointer;}
                        .medical-theme .gr-accordion {border: 2px solid #ced4da; border-radius: 8px;}
                        .medical-theme .gr-accordion .gr-accordion-header {background-color: #e9ecef; color: #495057; padding: 8px 16px; border-bottom: 2px solid #ced4da; font-weight: 600;}
                        .medical-theme .gr-accordion .gr-accordion-header:hover {background-color: #e2e6ea; cursor: pointer;}
                        .medical-theme .card {background-color: #ffffff; border-radius: 8px; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); padding: 20px; margin-bottom: 20px;}
                        .medical-theme .emergency-btn {background-color: #dc3545; border-color: #dc3545; color: white; padding: 8px 16px; font-size: 16px; border-radius: 8px; box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1); font-weight: bold;}
                        .medical-theme .emergency-btn:hover {background-color: #c82333; cursor: pointer;}
                        """) as app:
        with gr.Column(elem_classes="medical-theme"):
            gr.Markdown("<h1 style='text-align: center; color: #007bff;'>Radiology Report Assistant</h1>", elem_classes="output-markdown")
            gr.Markdown("<h3 style='text-align: center; color: #28a745;'>Upload your medical scan, get an AI-generated provisional report, and download a professionally formatted PDF.</h3>", elem_classes="output-markdown")

            with gr.Row():
                with gr.Column(scale=5):
                    image_input = gr.Image(type="filepath", label="Upload X-Ray or Scan Image")
                    report_format = gr.Textbox(placeholder="Define the report format here...", label="Provisional Report Format")
                    with gr.Row():
                        emergency_button = gr.Button("Alert Care Team", elem_classes="emergency-btn", scale=1)
                        submit_button = gr.Button("Generate Provisional Report", elem_classes="gr-button", scale=4)
                    provisional_report = gr.Textbox(label="Provisional Report", placeholder="The report will appear here...", lines=6, interactive=True)
                    download_report_button = gr.Button("Download Detailed Medical Report", elem_classes="gr-button")
                    report_download_file = gr.File(label="Download Report")

                with gr.Column(scale=4):
                    with gr.Accordion("AI Generated Non Medical Summary", open=True):
                        language_toggle = gr.Dropdown(
                            label="Select Language",
                            choices=["English","Hindi", "Punjabi", "Gujrati", "Bengali", "Urdu", "Tamil", "Telugu", "Malayalam", "Marathi"],
                            value="English",
                        )
                        explanation_output = gr.Textbox(label="AI Generated Non Medical Summary", placeholder="The abstract will appear here...", lines=6)
                        explanation_button = gr.Button("Generate Non Medical Summary", elem_classes="gr-button")
                        download_explanation_button = gr.Button("Download Non Medical Summary", elem_classes="gr-button")
                        explanation_download_file = gr.File(label="Download Non Medical Summary")

        # Store the intermediate outputs for PDF generation
        report_pdf_path_state = gr.State()
        explanation_pdf_path_state = gr.State()

        submit_button.click(
            process_image,
            inputs=[image_input, report_format],
            outputs=[provisional_report],
        )

        explanation_outputs = explanation_button.click(
            process_final_report,
            inputs=[provisional_report, language_toggle],
            outputs=[explanation_output, explanation_pdf_path_state]
        )

        report_pdf_output = download_report_button.click(
            process_pdf_only,
            inputs=[provisional_report],
            outputs=[report_download_file],
        )

        explanation_pdf_output = download_explanation_button.click(
            lambda state: state,
            inputs=[explanation_pdf_path_state],
            outputs=[explanation_download_file],
        )

    return app

if __name__ == "__main__":
    app = create_app()
    app.launch(share=True)